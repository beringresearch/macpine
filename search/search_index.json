{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Lightweight Alpine VMs on MacOS","text":"<p>Create and manage lightweight Alpine VMs on MacOS with:</p> <ul> <li> <p>Seamless port forwarding</p> </li> <li> <p>Automatic file sharing</p> </li> <li> <p>Bridged networking</p> </li> <li> <p>aarch64 and x86_64 emulation</p> </li> </ul>"},{"location":"#motivation","title":"Motivation","text":"<p>The goal of this project is to enable MacOS users to:</p> <ol> <li>Easily spin up and manage lightweight Alpine Linux environments.</li> <li>Use tiny VMs to take advantage of containerisation technologies, including Incus, LXD and Docker.</li> <li>Build and test software on x86_64 and aarch64 systems.</li> </ol>"},{"location":"autostart/","title":"Auto-start instances at login","text":"<p><code>macpine</code> can add a <code>launchctl</code> agent to start instances upon user login. Note that this may slow the login process.</p> <p>Once installed, the launch agent will automatically start all instances with the tag <code>launchctl-autostart</code> upon user login. This tag can be added with <code>alpine tag &lt;instance name&gt; launchctl-autostart</code> to an arbitrary number of instances.</p> <p>There are two ways to install the <code>macpine</code> <code>launchctl</code> launch agent <code>plist</code> file:</p>"},{"location":"autostart/#installing-with-brew-and-brew-services","title":"Installing with <code>brew</code> and <code>brew services</code>","text":"<pre><code>brew install macpine\nbrew services start macpine\n</code></pre>"},{"location":"autostart/#installing-from-source","title":"Installing from source","text":"<pre><code>git clone https://github.com/beringresearch/macpine.git\ncd macpine\nmake install &amp;&amp; make agent\n</code></pre> <p>This will add <code>alpineDaemonLaunchAgent.plist</code> to <code>~/Library/LaunchAgents</code> with the directive to start the appropriately tagged instances.</p>"},{"location":"completions/","title":"Shell completions","text":"<p>You can use command <code>completion</code> command to create bash|fish|zsh|powershell completion file</p> <pre><code>alex@vosjod:~$ alpine completion\n2023/01/05 23:59:48 missing shell\nalex@vosjod:~$ alpine completion --help\nGenerate shell autocompletions. Valid arguments are bash, fish, zsh, and powershell.\n\nUsage:\n  alpine completion [bash|fish|zsh|powershell]\n\nFlags:\n  -h, --help   help for completion\nalex@vosjod:~$ alpine completion bash\n# bash completion V2 for alpine                               -*- shell-script -*-\n\n__alpine_debug()\n{\n    if [[ -n ${BASH_COMP_DEBUG_FILE:-} ]]; then\n        echo \"$*\" &gt;&gt; \"${BASH_COMP_DEBUG_FILE}\"\n    fi\n}\n\n# Macs have bash3 for which the bash-completion package doesn't include\n# _init_completion. This is a minimal version of that function.\n__alpine_init_completion()\n{\n    COMPREPLY=()\n    _get_comp_words_by_ref \"$@\" cur prev words cword\n}\n\n[...]\n</code></pre>"},{"location":"completions/#install","title":"Install","text":"<p>Create completion file (bash, fish, zsh, or powershell) and put on your path, for example using bash:</p> <pre><code>alex@vosjod:~$ alpine completion bash &gt; /usr/local/etc/bash_completion.d/alpine\nalex@vosjod:~$ source /usr/local/etc/bash_completion.d/alpine\nalex@vosjod:~$\n</code></pre> <p>For zsh, the completion file should be named <code>_alpine</code> and stored somewhere in the <code>$FPATH</code>.</p>"},{"location":"completions/#examples","title":"Examples","text":"<pre><code>alex@vosjod:~$ alpine [tab] [tab]\ndelete   (Delete an instance.)\nedit     (Edit instance configuration using Vim.)\nexec     (execute COMMAND over ssh.)\nhelp     (Help about any command)\nimport   (Imports an instance.)\ninfo     (Display information about instances.)\nlaunch   (Launch an Alpine instance.)\nlist     (List all available instances.)\npublish  (Publish an instance.)\nssh      (Attach an interactive shell to an instance.)\nstart    (Start an instance.)\nstop     (Stop an instance.)\nalex@vosjod:~$ alpine ssh [tab] [tab]\nflat-fight      ignorant-punch\nalex@vosjod:~$ alpine ssh flat-fight\n2023/01/05 20:30:49 dial tcp [::1]:23: connect: connection refused\n</code></pre> <pre><code>alex@vosjod:~$ alpine launch [tab] [tab]\nalex@vosjod:~$ alpine launch -[tab] [tab]\n--arch    (Machine architecture. Defaults to host cpu architecture.)\n--cpu     (Number of CPUs to allocate.)\n--disk    (Disk space to allocate. Positive integers, in bytes, or with K, M, G suffix.)\n--image   (Image to be launched.)\n--memory  (Amount of memory to allocate. Positive integers, in kilobytes.)\n--mount   (Path to host directory to be exposed on guest.)\n--name    (Name for the instance)\n--port    (Forward instance ports to host. Multiple ports can be separated by `,`.)\n--ssh     (Forward instance SSH port to host.)\n-a        (Machine architecture. Defaults to host cpu architecture.)\n-c        (Number of CPUs to allocate.)\n-d        (Disk space to allocate. Positive integers, in bytes, or with K, M, G suffix.)\n-i        (Image to be launched.)\n-m        (Amount of memory to allocate. Positive integers, in kilobytes.)\n-n        (Name for the instance)\n-p        (Forward instance ports to host. Multiple ports can be separated by `,`.)\n-s        (Forward instance SSH port to host.)\nalex@vosjod:~$ alpine launch -a aarch64 --[tab] [tab]\n--cpu     (Number of CPUs to allocate.)\n--disk    (Disk space to allocate. Positive integers, in bytes, or with K, M, G suffix.)\n--image   (Image to be launched.)\n--memory  (Amount of memory to allocate. Positive integers, in kilobytes.)\n--mount   (Path to host directory to be exposed on guest.)\n--name    (Name for the instance)\n--port    (Forward instance ports to host. Multiple ports can be separated by `,`.)\n--ssh     (Forward instance SSH port to host.)\n</code></pre>"},{"location":"create_instance/","title":"How to create an instance","text":""},{"location":"create_instance/#host-to-instance-port-forwarding","title":"Host-to-Instance Port Forwarding","text":"<p>Network ingress over the virtual interface can be enabled during instance creation or after a \"reboot\" (<code>alpine restart &lt;instance name&gt;</code>).</p> <p>When using <code>-p</code> in <code>alpine launch</code> or adding to the <code>port</code> string in <code>config.yaml</code> (with <code>alpine edit</code> or otherwise), a string argument must be provided. This string identifies ports which should be forwarded from the host to the guest by QEMU. A single port number will forward that port on the host to that port on the guest, and a colon-delimited pair specifies mapping from host to guest with differing port numbers.</p> <p>The string can be described formally in pseudo-EBNF:</p> <pre><code>ports := \"\" | &lt;port&gt;,&lt;ports&gt;\nport := &lt;number&gt;&lt;proto&gt; | &lt;number&gt;:&lt;number&gt;&lt;proto&gt;\nnumber := 0 to 65535\nproto := \"\" | u\n</code></pre> <p>Or informally as a <code>,</code> comma-delimited list of zero or more port mappings. A port mapping is either a number between 0 and 65536, or two such port numbers separated by a <code>:</code> colon. An optional character <code>u</code> can be appended to configure a UDP port forward rather than the default TCP.</p> <p>For example, to forward port 8080 from host to guest: <code>-p 8080</code> in <code>alpine launch</code> or <code>port: \"8080\"</code> in <code>config.yaml</code>.</p> <p>Further examples:</p> <p>TCP forward <code>host:1111</code> to <code>guest:1111</code> and <code>host:2222</code> to <code>guest:3333</code>; UDP forward <code>host:4444</code> to <code>guest:4444</code> and <code>host:5555</code> to <code>guest:6666</code>.</p> <pre><code>port: \"1111,2222:3333,4444u,5555:6666u\"\n</code></pre> <p>Forward 8080 from host to guest on TCP and UDP:</p> <pre><code>port: \"8080,8080u\"\n</code></pre>"},{"location":"create_instance/#configuring-ssh-and-storing-ssh-credentials","title":"Configuring SSH and Storing SSH Credentials","text":"<p>By default, <code>macpine</code> requires <code>root</code> ssh to access and execute commands on guest machines. The default credential is the root password, which is set (insecurely) to <code>root</code>. In most cases, this is sufficient for the use cases <code>macpine</code> is expected to support, as security against malicious host system behavior is not within the threat model.</p> <p>However, more secure credentials such as certificate-based ssh, instance hardening (e.g. disabling password-based ssh), or security best practices may require credentials to be changed from the default, and stored outside the host filesystem.</p> <p>In order to support multiple credential methods, <code>macpine</code> supports multiple credential \"backends\":</p> <ul> <li><code>raw</code> i.e. password-based ssh, with password stored in <code>config.yaml</code>, default <code>root</code></li> <li><code>env</code> i.e. password-based ssh, with password stored in a host-system environment variable</li> <li><code>ssh</code> i.e. <code>ssh-agent</code>-based ssh authentication</li> </ul> <p>The second, <code>env</code>, is marginally more secure than <code>raw</code> and may be useful in automation scenarios or when <code>ssh-agent</code> is not available. The third defers credential management to the host system's <code>ssh-agent</code>, which can be backed by hardened memory-based storage (default) or credential managers such as <code>gnome-keyring-daemon</code> or the macOS system keychain.</p> <p>In order to configure credentials in <code>config.yaml</code> for <code>sshpassword</code> (and <code>rootpassword</code> if <code>sshuser</code> is changed from the default of <code>root</code>), credential strings describe to <code>macpine</code> how to authenticate via ssh. Credential strings take the following forms:</p> <pre><code>sshpassword: \"password\" # with sshuser: \"root\", authenticate via password\nOR\nsshpassword: \"raw::password\" # equivalent, prefix denotes the \"raw\" credential backend\nOR\nsshpassword: \"env::SOME_VARIABLE\" # ssh password is stored in environment variable $SOME_VARIABLE on the host\nOR\nsshpassword: \"ssh::HOSTNAME\" # ssh credential is stored in ssh-agent, and is configured for use with host HOSTNAME (e.g. in ~/.ssh/config)\n</code></pre> <p>If the <code>ssh</code> backend is used, ssh must be configured (usually in <code>~/.ssh/config</code>) with the given hostname to use the appropriate credential, likely an ssh private key.</p> <p>For example, with keypair <code>id_ed25519</code> and <code>id_ed25519.pub</code>:</p> <p><code>~/.ssh/config</code>:</p> <pre><code>Host alpine\n    Hostname localhost\n    User root\n    Port 22\n    IdentityFile ~/.ssh/id_ed25519\n    IdentitiesOnly yes\n</code></pre> <p><code>~/.macpine/instance-name/config.yaml</code>:</p> <pre><code>alias: instance-name\nimage: alpine_3.16.0-aarch64.qcow2\narch: aarch64\ncpu: \"4\"\nmemory: \"2048\"\ndisk: 10G\nmount: \"\"\nport: \"\"\nsshport: \"22\"\nsshuser: root\nsshpassword: \"ssh::alpine\"\nmacaddress: 00:11:22:33:44:55\nlocation: /Users/username/.macpine/instance-name\n</code></pre> <p>and (\"inside\" the instance) <code>/root/.ssh/authorized_keys</code>:</p> <pre><code>... contents of id_ed25519.pub ...\n</code></pre>"},{"location":"hardening/","title":"Hardening <code>macpine</code> instances (via QEMU use and configuration)","text":""},{"location":"hardening/#qemu-resources","title":"QEMU Resources","text":"<ul> <li>General QEMU Security Information</li> <li><code>!!</code> note: tiny codegen emulation is not developed for security. Guests emulated using <code>tcg</code> must be considered trusted.</li> <li>Reporting QEMU Security Issues</li> </ul>"},{"location":"hardening/#linux-resources","title":"Linux Resources","text":"<ul> <li>grsecurity (non-free)</li> <li>SELinux and AppArmor</li> </ul>"},{"location":"hardening/#general-tips","title":"General tips","text":"<ul> <li>Limit exposed interfaces, virtual devices, and ports</li> <li>Run services on unprivileged ports (&gt; 1024) as   dedicated users   with localhost proxying if needed</li> <li>Configure <code>ssh-agent</code> authentication to the guest machine with certificate-based credentials, and then disable password   authentication (<code>PermitRootLogin prohibit-password</code> and/or <code>PasswordAuthentication no</code> in <code>/etc/ssh/sshd_config</code>)</li> <li><code>qemu</code> port forwarding binds <code>0.0.0.0</code>, meaning any source IP may send traffic to the guest. Enabling a firewall on the host can prevent     unwanted ingress traffic to the guest.</li> </ul>"},{"location":"incus_macpine/","title":"Running Incus containers in Macpine","text":""},{"location":"incus_macpine/#overview","title":"Overview","text":"<p>Incus is a next generation system container manager with support for a wide number of Linux distributions. It provides a simple way to build, test, and run multiple Linux environments across a single machine or multiple compute clusters.</p> <p>Under the hood, incus uses LXC, through liblxc and its Go binding, to create and manage the containers. However, incus relies on a number of Linux kernel features, such as CGroups and kernel namespaces, which aren't natively available on MacOS.</p> <p>Macpine makes it possible to run Incus/LXC containers on MacOS with support for both amd64 and arm64 processors, through its lightweight virtualisation layer. This workflow makes it easy to develop and test incus containers locally.</p>"},{"location":"incus_macpine/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install QEMU and macpine</li> </ol> <pre><code>brew install qemu macpine\n</code></pre> <ol> <li>Install the incus client</li> </ol> <pre><code>brew install incus\n</code></pre>"},{"location":"incus_macpine/#install-incus","title":"Install Incus","text":"<p>Now that that the system is ready, we can create a lightweight Macpine instance, which will be configured to run Incus. In your terminal run:</p> <pre><code>alpine launch --name incus --ssh 223 --port 8443\n</code></pre> <p>This will create a new instance called <code>incus</code> and forward port <code>8443</code> (the default port that the incus client uses to communicate with the incus server) of the instance to host. Macpine will attempt to match the native CPU architecture of your host to the correct instance image. However, if you can explicitly specify the architecture by adding either <code>--arch aarch64</code> or <code>--arch x86_64</code> to the above command.</p> <p>Now lets install the incus daemon.</p> <pre><code>alpine exec incus -- \"hwclock -s; wget https://raw.githubusercontent.com/beringresearch/macpine/main/scripts/enable_incus.sh\"\n\nalpine exec incus -- \"ash enable_incus.sh\"\n</code></pre> <p>When the script finishes execution, the incus daemon will be available at guest startup.</p>"},{"location":"incus_macpine/#configure-incus","title":"Configure incus","text":"<p>Before you can create an instance, you need to configure incus.</p> <p>Run the following command to accept all automatic defaults:</p> <pre><code>alpine exec incus \"incus admin init --auto\"\n</code></pre> <p>For the purposes of this tutorial, it is recommended to accept default settings.</p> <p>NOTE: the above command is executed inside your <code>incus</code> instance and is sandboxed from your host.</p>"},{"location":"incus_macpine/#configure-incus-remote","title":"Configure incus remote","text":"<p>Set up your incus remote to communicate with the incus client on your host.</p> <pre><code>alpine exec incus \"incus config set core.https_address 0.0.0.0:8443\"\nalpine exec incus \"incus config trust add mymac\"\n</code></pre> <p>The command generates and prints a token that can be used to add the client certificate.</p> <p>NOTE: Make a note of the token as it will be used to authenticate the incus client.</p>"},{"location":"incus_macpine/#add-the-remote-to-your-incus-client","title":"Add the remote to your Incus client:","text":"<p>Now that the remote server is configured, lets finish by configuring the incus client and adding our <code>incus</code> macpine instance as a remote.</p> <pre><code>incus remote add incus https://127.0.0.1\n</code></pre> <p>Enter the trust token for incus that you've noted from the steps before.</p> <p>Finally, set this remote as the default:</p> <pre><code>incus remote switch incus\n</code></pre> <p>That's it - you can now run incus containers through Macpine at nearly-native speeds!</p>"},{"location":"incus_macpine/#launching-your-first-incus-container","title":"Launching your first incus container","text":"<p>Incus containers can now be launched and manipulated through the <code>incus</code> client. On your mac run:</p> <pre><code>incus launch images:debian/bullseye debian\n</code></pre>"},{"location":"incus_macpine/#connecting-to-your-first-incus-container","title":"Connecting to your first incus container","text":"<pre><code>incus exec debian -- bash\n</code></pre>"},{"location":"incus_macpine/#saving-vm-status","title":"Saving VM status","text":"<p>You can save the Macpine VM image with your incus configuration for later use:</p> <pre><code>alpine publish incus\n</code></pre> <p>This will create a tar ball that can be imported using <code>alpine import</code>.</p>"},{"location":"incus_macpine/#cleanup","title":"Cleanup","text":"<pre><code>incus stop debian\nincus delete debian\nalpine stop incus\nalpine delete incus\n</code></pre>"},{"location":"install/","title":"Installation","text":"<p><code>macpine</code> depends on QEMU &gt;= 6.2.0_1:</p> <pre><code>#brew update\n#brew upgrade\nbrew install qemu\n</code></pre>"},{"location":"install/#install-the-latest-binary","title":"Install the latest binary","text":"<p>Download the latest binary release for your system and add it to your path by placing to e.g. <code>/usr/local/bin/</code></p> <pre><code>wget https://github.com/beringresearch/macpine/releases/download/v1.0/alpine_darwin_arm64\nmv alpine_darwin_arm64 alpine\nsudo chmod +x alpine\nsudo mv alpine /usr/local/bin/\n</code></pre>"},{"location":"install/#install-via-homebrew-recommended","title":"Install via Homebrew (recommended)","text":"<pre><code>brew install macpine\n</code></pre>"},{"location":"install/#install-via-macports","title":"Install via MacPorts","text":"<p>On MacOS, you can install via MacPorts:</p> <pre><code>sudo port install macpine\n</code></pre>"},{"location":"install/#install-from-source","title":"Install from source","text":"<pre><code>git clone https://github.com/beringresearch/macpine\ncd macpine\nmake\nmake install #install to /usr/local by default, may require sudo\n</code></pre>"},{"location":"lxd_macpine/","title":"Running LXD containers in Macpine","text":""},{"location":"lxd_macpine/#overview","title":"Overview","text":"<p>LXD is a next generation system container manager with support for a wide number of Linux distributions. It provides a simple way to build, test, and run multiple Linux environments across a single machine or multiple compute clusters.</p> <p>Under the hood, LXD uses LXC, through liblxc and its Go binding, to create and manage the containers. However, LXD relies on a number of Linux kernel features, such as CGroups and kernel namespaces, which aren't natively available on MacOS.</p> <p>Macpine makes it possible to run LXD/LXC containers on MacOS with support for both amd64 and arm64 processors, through its lightweight virtualisation layer. This workflow makes it easy to develop and test LXD containers locally.</p>"},{"location":"lxd_macpine/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install QEMU and macpine</li> </ol> <pre><code>brew install qemu macpine\n</code></pre> <ol> <li>Install the LXD client</li> </ol> <pre><code>brew install lxc\n</code></pre>"},{"location":"lxd_macpine/#launch-an-lxd-instance","title":"Launch an LXD instance","text":"<p>Now that that the system is ready, we can create a lightweight Macpine instance. In your terminal run:</p> <pre><code>sudo alpine launch --name lxd-aarch64 --shared\n</code></pre> <p>This will create a new instance called <code>lxd-aarch64</code>.</p>"},{"location":"lxd_macpine/#configure-lxd","title":"Configure LXD","text":"<p>Before you can create an instance, you need to configure LXD.</p> <p>Run the following command to accept all automatic defaults:</p> <pre><code>alpine exec lxd-aarch64 \"wget https://raw.githubusercontent.com/beringresearch/macpine/refs/heads/main/scripts/enable_lxd.sh\"\nalpine exec lxd-aarch64 \"ash enable_lxd.sh\"\nalpine exec lxd-aarch64 \"lxd init --auto\"\n</code></pre> <p>For the purposes of this tutorial, it is recommended to accept default settings.</p> <p>NOTE: the above command is executed inside your <code>lxd-aarch64</code> instance and is sandboxed from your host.</p>"},{"location":"lxd_macpine/#configure-lxd-remote","title":"Configure LXD remote","text":"<p>Set up your LXD remote to communicate with the LXD client on your host.</p> <pre><code>alpine exec lxd-aarch64 \"lxc config set core.https_address [machineip]\"\nalpine exec lxd-aarch64 \"lxc config set core.trust_password root\"\n</code></pre> <p>Your VM's IP address is obtained by running <code>alpine info lxd-aarch64</code>.</p> <p>NOTE: for the purposes of this demonstration, the remote password is configured as <code>root</code>. This password can be configured with <code>lxc config set core.trust_password</code> above</p>"},{"location":"lxd_macpine/#add-the-remote-to-your-lxd-host","title":"Add the remote to your LXD host:","text":"<pre><code>lxc remote add macpine [machineip] --accept-certificate --password root\n</code></pre> <p>Your VM's IP address is obtained by running <code>alpine info lxd-aarch64</code>.</p> <p>NOTE: if you create an alpine lxd instance, then destroy it, then try to reconfigure another on later on your host, you may need to delete <code>macpine</code> remote from <code>~/.config/lxc/config.yml</code> due to new certificates each time.</p> <p>Finally, set this remote as the default:</p> <pre><code>lxc remote switch macpine\n</code></pre> <p>That's it - you can now run LXD containers through Macpine at nearly-native speeds!</p>"},{"location":"lxd_macpine/#launching-your-first-lxd-container","title":"Launching your first LXD container","text":"<p>LXD containers can now be launched and manipulated through the <code>lxc</code> client:</p> <pre><code>lxc launch ubuntu:24.04 ubuntu\n</code></pre>"},{"location":"lxd_macpine/#mounting-host-directory-lxd-macpine-instance-lxd-container","title":"Mounting host directory -&gt; lxd Macpine instance -&gt; lxd container","text":"<pre><code>lxc config device add ubuntu share disk source=/root/mnt path=/root/mnt\n</code></pre>"},{"location":"lxd_macpine/#connecting-to-your-first-lxd-container","title":"Connecting to your first LXD container","text":"<pre><code>lxc exec ubuntu -- bash\n</code></pre>"},{"location":"lxd_macpine/#cleanup","title":"Cleanup","text":"<pre><code>lxc stop ubuntu\nlxc delete debian\nalpine delete lxd-aarch64\n</code></pre>"},{"location":"modify_instance/","title":"Editing instance configurations","text":"<p>Various instance parameters are set at creation with <code>alpine launch</code>. These can be changed at any time, but if an instance is running, a reboot (<code>alpine restart instance-name</code>) is required for them to take effect.</p>"},{"location":"modify_instance/#modifying-instance-configs","title":"Modifying instance configs","text":"<p><code>alpine edit instance-name</code> will open the configuration file in a terminal editor, <code>$EDITOR</code>, <code>vim</code>, or <code>nano</code> by default. Configuration files can be found in <code>~/.macpine/instance-name/config.yaml</code> for editing with external tools.</p> <p>Do not modify the <code>alias</code> or <code>location</code> entries in <code>config.yaml</code>, rather, use <code>alpine rename &lt;instance name&gt; &lt;new name&gt;</code> to rename instances.</p> <p>Some validations are performed after an <code>alpine edit</code> editing, and if they fail the <code>config.yaml</code> will be reverted to its pre-edit state.</p>"},{"location":"modify_instance/#config-file-format","title":"Config file format","text":"<p>The instance configurations are stored as <code>YAML</code> in their respective instance directories in <code>~/.macpine</code>. An illustrative example is shown here with comments:</p> <pre><code>alias: instance-name                            # instance name for use in `alpine` commands, only modify with `alpine rename`\nimage: alpine_3.16.0-aarch64.qcow2              # image file in ~/.macpine/cache to boot from\narch: aarch64                                   # architecture, either ARM or Intel\ncpu: \"2\"                                        # number of virtual threads to allocate\nmemory: \"2048\"                                  # megabytes (mebibytes, really) of RAM to allocate\ndisk: 10G                                       # bytes of storage to allocate\nmount: \"/Users/user/Documents\"                  # directories to mount to /mnt in the instance\nport: \"8080,9090u,10010:10020\"                  # port forwarding specification (refer to `docs/docs/create_instance.md`)\nsshport: \"20022\"                                # host port for SSH, forwards to TCP/22 on the instance\nsshuser: root                                   # can be modified, but then `rootpassword` must be specified\nsshpassword: root                               # can be hardened with other authentication (refer to `docs/docs/create_instance.md`)\nrootpassword: pass                              # optional, only required if `sshuser` is changed from `root`\nmacaddress: aa:bb:cc:dd:ee:ff                   # generated, no need to modify\nlocation: /Users/user/.macpine/instance-name    # location on host filesystem, only modify with `alpine rename`\ntags:                                           # instance tags in `alpine list` and `alpine &lt;command&gt; +foo` tag-based commands\n    - foo\n    - bar\n    - baz\n</code></pre>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#slirp-network-mode","title":"SLIRP network mode","text":"<p>This is the simplest networking mode. Machines in this mode do not require sudo priveledges, but do require individual ports to be forwarded to host in order to be useful.</p> <p>To launch a brand new instance:</p> <pre><code>alpine launch #launches with default parameters\nalpine launch -a aarch64 #create an aarch64 instance\nalpine launch -d 10G -c 4 -m 2048 #create a machine with a 10GB disk, 4 cpus and 2GB of RAM\n\n</code></pre> <p>Access instance via ssh:</p> <pre><code>alpine launch -s 22 #launch a instance and expose SSH port to host port 22\nssh root@localhost -p 22 #password: root\n</code></pre> <p>Expose additional instance ports to host:</p> <pre><code>alpine launch -s 23 -p 8888,5432 #launch a instance, expose SSH to host port 23 and forward instance ports 8888 and 5432 to host ports 8888 and 5432\n</code></pre> <p>Instances can be easily packaged for export and re-use as tar.gz files:</p> <pre><code>alpine list\n\nNAME                STATUS      SSH    PORTS ARCH        PID\nforthright-hook     Running     23           aarch64     91598\nhot-cow             Running     22           x86_64      82361\n</code></pre> <pre><code>alpine publish hot-cow\n</code></pre> <p>This will create a file hot-cow.tar.gz which can be imported as:</p> <pre><code>alpine import hot-cow.tar.gz\n</code></pre>"},{"location":"quickstart/#vmnet-shared-mode","title":"VMNet-shared mode","text":"<p>The instance requires to be launched as sudu. This mode uses Apple's VMNet-Shared mode, which provides every machine a dynamic IP address. All ports are automatically accessible through host.</p> <pre><code>sudo alpine launch --shared\n</code></pre>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#troubleshooting","title":"Troubleshooting","text":""},{"location":"troubleshooting/#common-issue-remediationprevention","title":"Common issue remediation/prevention","text":"<p>To solve some common issues:</p> <ul> <li>Ensure <code>PermitRootLogin yes</code> remains set in <code>/etc/ssh/sshd_config</code> (in the instance) or the machine may become inaccessible/fail to start.</li> <li>If a custom root password (e.g. <code>pass</code>) is set (in the instance), add <code>rootpassword: pass</code> in <code>config.yaml</code> via <code>alpine edit machine-name</code>   or directly with any text editor.</li> <li>If <code>alpine list</code> reports a machine is <code>Running</code> but the process has been terminated/killed, deleting the PID file at   <code>~/.macpine/machine-name/alpine.pid</code> may resolve the issue. <code>killall qemu-system</code> may also be useful to hard stop any running instances if needed.</li> </ul>"},{"location":"troubleshooting/#adjusting-time","title":"Adjusting time","text":"<p>Time sync issues between the host and a VM are well known. For example, when the host is suspended, the VM clock will also stop ticking.</p> <p>To re-adjust a <code>macpine</code> instance real-time clock to its system clock, execute (inside the instance):</p> <pre><code>hwclock -s\n</code></pre> <p>Or on the host:</p> <pre><code>alpine exec instance-name \"hwclock -s\"\n</code></pre> <p>Also, consider an <code>ntp</code> daemon within your instance to maintain the system clock. This can be added inside your instance:</p> <pre><code>apk update; apk add openntpd\nrc-update add openntpd default\nrc-service openntpd start\n</code></pre> <p>or</p> <pre><code>apk update; apk add chrony\nservice chronyd start\n</code></pre> <p>More information on <code>chronyd</code> can be found on the Arch wiki</p>"},{"location":"troubleshooting/#networking-issues","title":"Networking issues","text":"<ul> <li>Due to how <code>qemu</code> forwards network connections from the guest out via the host, utilities such as <code>ping</code> may not work (as ICMP is not handled).</li> <li>If an instance fails to start with a port error, there may be a listener already bound to the requested port(s). Ensure that the <code>ssh</code> port and any ports on the host side in the <code>Ports</code> configuration are mutually exclusive between instances which must run simultaneously.</li> <li><code>netstat -anp tcp</code> and <code>netstat -anp udp</code> can be used to discover active <code>LISTEN</code> connections on the host. Ensure no other running services have bound ports that are configured to be forwarded to an instance (<code>ssh</code> or otherwise).</li> <li><code>qemu</code> binds <code>0.0.0.0</code> for forwarded ports. This means that by default any source IP may send traffic to a guest. If the host system     does not have a firewall enabled then any     machines which can reach the host can send traffic to the guest. If this is not desired, enable a host firewall. You do not need to     click \"Allow\" for incoming connection to <code>qemu</code> when prompted by macOS as loopback connections (i.e. directly from the host itself)     will still be allowed.</li> </ul>"},{"location":"troubleshooting/#other-issues","title":"Other issues","text":"<ul> <li>If alpine is not able to resize the disk, it will error out with this message: <code>unable to resize disk: signal: abort trap</code>. Internally, it runs the command <code>qemu-img resize &lt;IMAGE_LOCATION&gt; &lt;+SIZE&gt;</code>. If the <code>qemu-img resize</code> command errors out with <code>dyld[...]: Library not loaded: /opt/homebrew/opt/libunistring/lib/libunistring.2.dylib</code> then re-installing <code>gettext</code> via <code>brew reinstall gettext</code> may resolve the issue.</li> </ul>"},{"location":"verifiable_publish/","title":"Verifiable Publish and Import","text":""},{"location":"verifiable_publish/#encrypting-instance-archives","title":"Encrypting instance archives","text":"<p><code>alpine publish &lt;instance name&gt;</code> creates a <code>.tar.gz</code> archive of the filesystem and configurations of an instance. These archives can be used for backup or sharing purposes.</p> <p>If instances are published for sharing, it may be desirable to authenticate them using strong cryptography. This allows for verifiable publishing and importing of instances over untrusted channels such as the internet or shared storage. It also allows for encrypted backups of sensitive instances.</p> <ul> <li><code>alpine publish -e &lt;instance name&gt;</code> / <code>alpine publish --encrypt &lt;instance name&gt;</code>: encrypt and authenticate archive with key derived from a passphrase (interactive prompt)</li> </ul> <p>To provide this functionality, <code>macpine</code> uses <code>age</code>, a modern, efficient, and vetted Go implementation of strong cryptographic tools which enable authenticated encryption of files.</p>"},{"location":"verifiable_publish/#encrypting-with-a-password","title":"Encrypting with a password","text":"<pre><code>$ alpine list\nNAME       STATUS      SSH    PORTS         ARCH        PID       TAGS\ndevel      Stopped     22                   aarch64     -         daemon,dev\n$ alpine publish -e devel                                        # publish instance `devel` with password\nEnter passphrase (leave empty to autogenerate a secure one): [return]\nage: using autogenerated passphrase \"better-avocado-regret-marriage-acoustic-beyond-search-record-drum-shadow\"\n$ ls devel.tar.gz.age                                            # encrypted archive is created\ndevel.tar.gz.age\n$ alpine delete devel\n$ alpine list\nNAME       STATUS      SSH    PORTS         ARCH        PID       TAGS\n$ alpine import devel.tar.gz.age                                 # import requires the corresponding private key\nEnter passphrase: better-avocado-regret-marriage-acoustic-beyond-search-record-drum-shadow\n$ alpine list\nNAME       STATUS      SSH    PORTS         ARCH        PID       TAGS\ndevel      Stopped     22                   aarch64     -         daemon,dev\n</code></pre>"},{"location":"verifiable_publish/#further-information","title":"Further information","text":"<p>For the details of <code>age</code>, such as the <code>age</code> file format, refer to the documentation of the project.</p> <p><code>age</code> also supports asymmetric cryptography, encrypting &amp; signing using <code>age</code> public keys or even <code>ssh</code> keys. In order to share a <code>macpine</code> instance (e.g. <code>example-instance</code>) to a GitHub user (e.g. <code>example-user</code>) with the <code>ssh</code> keys listed in their profile:</p> <pre><code>brew install age\ncurl -s https://github.com/example-user.keys | head -n1 &gt; example-user.pub\nalpine publish example-instance\nage -e -o example-instance.tar.gz.age -R example-user.pub example-instance.tar.gz\n# example-instance.tar.gz.age can be decrypted with example-user's private key\n</code></pre> <p>Note that <code>ssh</code> keys are generally used for authentication rather than long-term encryption and therefore may not be kept private. This approach should be used only if this caveat can be considered an acceptable risk.</p>"},{"location":"cli/","title":"Command Reference","text":"<pre><code>alpine --help\nCreate, control and connect to Alpine instances.\n\nUsage:\n  alpine [command]\n\nAvailable Commands:\n  delete      Delete an instance.\n  edit        Edit instance configuration using Vim.\n  exec        execute COMMAND over ssh.\n  help        Help about any command\n  import      Imports an instance.\n  info        Display information about instances.\n  launch      Launch an Alpine instance.\n  list        List all available instances.\n  publish     Publish an instance.\n  ssh         Attach an interactive shell to an instance.\n  start       Start an instance.\n  stop        Stop an instance.\n\nFlags:\n  -h, --help   help for alpine\n\nUse \"alpine [command] --help\" for more information about a command.\n</code></pre>"},{"location":"cli/alpine/","title":"alpine","text":"<p>Create, control, and connect to Alpine instances.</p>"},{"location":"cli/alpine/#description","title":"Description","text":"<p>Create, control, and connect to Alpine instances.</p>"},{"location":"cli/alpine/#options","title":"Options","text":"<pre><code>  -h, --help   help for alpine\n</code></pre>"},{"location":"cli/alpine_completion/","title":"alpine completion","text":"<p>Generate shell autocompletions.</p> <pre><code>alpine completion [bash|fish|zsh|powershell]\n</code></pre>"},{"location":"cli/alpine_completion/#description","title":"Description","text":"<p>Generate shell autocompletions. Valid arguments are bash, fish, zsh, and powershell.</p>"},{"location":"cli/alpine_completion/#options","title":"Options","text":"<pre><code>  -h, --help   help for completion\n</code></pre>"},{"location":"cli/alpine_delete/","title":"alpine delete","text":"<p>Delete instances.</p> <pre><code>alpine delete &lt;instance&gt; [&lt;instance&gt;...]\n</code></pre>"},{"location":"cli/alpine_delete/#description","title":"Description","text":"<p>Delete instances.</p>"},{"location":"cli/alpine_delete/#options","title":"Options","text":"<pre><code>  -h, --help   help for delete\n</code></pre>"},{"location":"cli/alpine_edit/","title":"alpine edit","text":"<p>Edit instance configurations.</p> <pre><code>alpine edit &lt;instance&gt; [&lt;instance&gt;...]\n</code></pre>"},{"location":"cli/alpine_edit/#description","title":"Description","text":"<p>Edit instance configurations.</p>"},{"location":"cli/alpine_edit/#options","title":"Options","text":"<pre><code>  -h, --help   help for edit\n</code></pre>"},{"location":"cli/alpine_exec/","title":"alpine exec","text":"<p>execute a command on an instance over ssh.</p> <pre><code>alpine exec &lt;instance&gt; &lt;command&gt;\n</code></pre>"},{"location":"cli/alpine_exec/#description","title":"Description","text":"<p>execute a command on an instance over ssh.</p>"},{"location":"cli/alpine_exec/#options","title":"Options","text":"<pre><code>  -h, --help   help for exec\n</code></pre>"},{"location":"cli/alpine_import/","title":"alpine import","text":"<p>Imports an instance archived with <code>alpine publish</code>.</p> <pre><code>alpine import &lt;archive&gt;\n</code></pre>"},{"location":"cli/alpine_import/#description","title":"Description","text":"<p>Imports an instance archived with <code>alpine publish</code>.</p>"},{"location":"cli/alpine_import/#options","title":"Options","text":"<pre><code>  -h, --help   help for import\n</code></pre>"},{"location":"cli/alpine_info/","title":"alpine info","text":"<p>Display information about instances.</p> <pre><code>alpine info &lt;instance&gt; [&lt;instance&gt;...]\n</code></pre>"},{"location":"cli/alpine_info/#description","title":"Description","text":"<p>Display information about instances.</p>"},{"location":"cli/alpine_info/#options","title":"Options","text":"<pre><code>  -h, --help   help for info\n</code></pre>"},{"location":"cli/alpine_launch/","title":"alpine launch","text":"<p>Create and start an instance.</p> <pre><code>alpine launch\n</code></pre>"},{"location":"cli/alpine_launch/#description","title":"Description","text":"<p>Create and start an instance.</p>"},{"location":"cli/alpine_launch/#options","title":"Options","text":"<pre><code>  -a, --arch string     Machine architecture. Defaults to host architecture.\n  -c, --cpu string      Number of CPUs to allocate. (default \"2\")\n  -d, --disk string     Disk space (in bytes) to allocate. K, M, G suffixes are supported. (default \"10G\")\n  -h, --help            help for launch\n  -i, --image string    Image to be launched. (default \"alpine_3.16.0\")\n  -m, --memory string   Amount of memory (in MB) to allocate. (default \"2048\")\n      --mount string    Path to a host directory to be shared with the instance.\n  -n, --name alpine     Instance name for use in alpine commands.\n  -p, --port ,          Forward additional host ports. Multiple ports can be separated by ,.\n  -v, --shared          Toggle whether to use mac's native vmnet-shared mode.\n  -s, --ssh string      Host port to forward for SSH (required). (default \"22\")\n</code></pre>"},{"location":"cli/alpine_list/","title":"alpine list","text":"<p>List instances.</p> <pre><code>alpine list\n</code></pre>"},{"location":"cli/alpine_list/#description","title":"Description","text":"<p>List instances.</p>"},{"location":"cli/alpine_list/#options","title":"Options","text":"<pre><code>  -h, --help   help for list\n</code></pre>"},{"location":"cli/alpine_pause/","title":"alpine pause","text":"<p>Pause instances.</p> <pre><code>alpine pause &lt;instance&gt; [&lt;instance&gt;...]\n</code></pre>"},{"location":"cli/alpine_pause/#description","title":"Description","text":"<p>Pause instances.</p>"},{"location":"cli/alpine_pause/#options","title":"Options","text":"<pre><code>  -h, --help   help for pause\n</code></pre>"},{"location":"cli/alpine_publish/","title":"alpine publish","text":"<p>Publish instances.</p> <pre><code>alpine publish &lt;instance&gt; [&lt;instance&gt;...]\n</code></pre>"},{"location":"cli/alpine_publish/#description","title":"Description","text":"<p>Publish instances.</p>"},{"location":"cli/alpine_publish/#options","title":"Options","text":"<pre><code>  -e, --encrypt   Encrypt published archive (prompts for passphrase).\n  -h, --help      help for publish\n</code></pre>"},{"location":"cli/alpine_rename/","title":"alpine rename","text":"<p>Rename an instance.</p> <pre><code>alpine rename &lt;instance&gt; &lt;name&gt;\n</code></pre>"},{"location":"cli/alpine_rename/#description","title":"Description","text":"<p>Rename an instance.</p>"},{"location":"cli/alpine_rename/#options","title":"Options","text":"<pre><code>  -h, --help   help for rename\n</code></pre>"},{"location":"cli/alpine_restart/","title":"alpine restart","text":"<p>Stop and start instances.</p> <pre><code>alpine restart &lt;instance&gt; [&lt;instance&gt;...]\n</code></pre>"},{"location":"cli/alpine_restart/#description","title":"Description","text":"<p>Stop and start instances.</p>"},{"location":"cli/alpine_restart/#options","title":"Options","text":"<pre><code>  -h, --help   help for restart\n</code></pre>"},{"location":"cli/alpine_resume/","title":"alpine resume","text":"<p>Unpause instances.</p> <pre><code>alpine resume &lt;instance&gt; [&lt;instance&gt;...]\n</code></pre>"},{"location":"cli/alpine_resume/#description","title":"Description","text":"<p>Unpause instances.</p>"},{"location":"cli/alpine_resume/#options","title":"Options","text":"<pre><code>  -h, --help   help for resume\n</code></pre>"},{"location":"cli/alpine_ssh/","title":"alpine ssh","text":"<p>Attach an interactive shell to an instance via ssh.</p> <pre><code>alpine ssh &lt;instance&gt;\n</code></pre>"},{"location":"cli/alpine_ssh/#description","title":"Description","text":"<p>Attach an interactive shell to an instance via ssh.</p>"},{"location":"cli/alpine_ssh/#options","title":"Options","text":"<pre><code>  -h, --help   help for ssh\n</code></pre>"},{"location":"cli/alpine_start/","title":"alpine start","text":"<p>Start instances.</p> <pre><code>alpine start &lt;instance&gt; [&lt;instance&gt;...]\n</code></pre>"},{"location":"cli/alpine_start/#description","title":"Description","text":"<p>Start instances.</p>"},{"location":"cli/alpine_start/#options","title":"Options","text":"<pre><code>  -h, --help   help for start\n</code></pre>"},{"location":"cli/alpine_stop/","title":"alpine stop","text":"<p>Stop instances.</p> <pre><code>alpine stop &lt;instance&gt; [&lt;instance&gt;...]\n</code></pre>"},{"location":"cli/alpine_stop/#description","title":"Description","text":"<p>Stop instances.</p>"},{"location":"cli/alpine_stop/#options","title":"Options","text":"<pre><code>  -h, --help   help for stop\n</code></pre>"},{"location":"cli/alpine_tag/","title":"alpine tag","text":"<p>Add or remove tags from an instance.</p> <pre><code>alpine tag [-r] &lt;instance&gt; &lt;tag1&gt; [&lt;tag2&gt;...]\n</code></pre>"},{"location":"cli/alpine_tag/#description","title":"Description","text":"<p>Add or remove tags from an instance.</p>"},{"location":"cli/alpine_tag/#options","title":"Options","text":"<pre><code>  -h, --help     help for tag\n  -r, --remove   Remove tag(s) rather than add them.\n</code></pre>"}]}